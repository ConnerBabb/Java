Book
https://book.techelevator.com/content/file-io-ool.html#writing-to-files

Writing to files
Reading from files is a lot like reading user input. Writing to files is a lot like writing to user output, but instead of using System.out, you connect to a file using a PrintWriter class.

#Opening a file for writing
As mentioned in the error handling section of reading files, opening files in a try-with-resources block assures that the file is properly closed once you're done writing to it. But instead of a Scanner, you'll open the file with a PrintWriter:

try (PrintWriter dataOutput = new PrintWriter(dataFile)) {
    ...
} catch (FileNotFoundException ex) {
    System.err.println("Can not open the file for writing.");
}
Once the file is open in a PrintWriter object, you can write to it by passing Strings to its println() or print() methods.

try (PrintWriter dataOutput = new PrintWriter(dataFile)) {
    dataOutput.println("Writing the first line of the file");
    dataOutput.println("Writing the second line of the file");
} catch (FileNotFoundException ex) {
    System.err.println("Can not open the file for writing.");
}
Appending to a File

If you want to open a file for writing and don't want to lose everything that's already in the file, you can set the file to be appended to. Appending means that the content you write to the file is added to the end of the file instead of overwriting everything in it.

To do that, you need to open the file with a FileOutputStream first, with a line like this:

try (PrintWriter dataOutput = new PrintWriter(
    new FileOutputStream(
        dataFile, true /* This true sets the file to be appended */
    )
)) {
It's a bit of a clunky line of code, but it allows you to add more information to an existing file instead of starting over with an empty file.

After writing these lines successfully to a file, the file contents are:

Writing the first line of the file
Writing the second line of the file
