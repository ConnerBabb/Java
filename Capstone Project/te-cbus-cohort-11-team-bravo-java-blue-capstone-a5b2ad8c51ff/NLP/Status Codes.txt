Book
https://book.techelevator.com/content/server-side-api-2.html#status-codes

Status codes
Normally, the correct status code is returned by default, but there may also be times when you want to return a different status code than the default. For instance, by default status code 200 is returned for a successful DELETE. However, REST suggests returning status code 204 on a successful DELETE. This is accomplished by adding the @ResponseStatus(value = HttpStatus.NO_CONTENT) annotation:

@RequestMapping( path = "/products/{id}", method = RequestMethod.DELETE )
@ResponseStatus(value = HttpStatus.NO_CONTENT)
public void delete(@PathVariable int id) {

    // Remove the product from underlying datastore

}
There may also be times when you want to return a different status code than the default due to an error. For example, if a user wanted to update the product with an ID of 13 and that ID wasn't in the database, you'd want to return a 404 status code.

You can do that by setting up a special exception that's linked to that status code with a @ResponseStatus annotation:

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ProductNotFoundException extends Exception {}
In your controller, if the request resource wasn't found, you throw a new ProductNotFoundException() and the 404 NOT FOUND status code is returned to the front-end code for you. This lets you use the error handling functionality in Java, exceptions, and it's translated to the error handling functionality of HTTP and REST status codes
