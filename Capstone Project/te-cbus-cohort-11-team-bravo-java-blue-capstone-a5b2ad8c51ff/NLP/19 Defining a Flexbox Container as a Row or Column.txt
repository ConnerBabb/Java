Book
https://book.techelevator.com/content/css-flexbox.html#defining-a-flexbox-container-as-a-row-or-column

Defining a flexbox container as a row or column
Imagine that you have this traditional page layout, and you're asked to place items into the non-shaded areas. Those non-shaded areas become flexbox containers. The child elements within the flexbox container are flexbox items.


Image - Layout
For example, you might use the following HTML for one of the panels. In this case, the flexbox container is the Section while the flexbox items are the Articles:

<section id="panel">
  <article>1</article>
  <article>2</article>
  <article>3.14159265359</article>
</section>
This is how the above HTML displays without any Flexbox CSS:


Image - Default Flex
You create a flexbox container in your CSS file by using an appropriate CSS selector to select the element within the HTML you wish to make into a flexbox container. Then, you assign the display property for that element to flex. Below is an example:

#panel {
  display: flex;
}
By default, the flexbox items are laid out horizontally. Applying the display property of flex results in this display:


Image - Default Flex
Flexbox provides many reasonable defaults so developers can avoid writing additional CSS. The important defaults applied to the picture above are the flex-direction and a property named flex-grow. The flex-direction CSS property defines the flexbox layout as either a row or a column.

You'll read about flex-grow later in this chapter. For now, know the default is for the items to take up all the space available in the vertical direction, but only enough space to fit their content in the horizontal direction.

It took no effort to create a row of flexbox items because of the default. To create a column of flexbox items, add the CSS property of flex-direction with the value of column:

#panel {
  display: flex;
  flex-direction: column;
}
#bottom-horizontal {
  display: flex;
}
The vertical element is now a column of flexbox items:

Flex Column


Image - Default Flex Column
The horizontal element remains a row layout by default:


Image - Default Flex
Notice that the vertical element items still take up the entire width because there's no width and height set on the items. By default, the flex-grow property, discussed soon, consumes all the space.

As you can see, Flexbox doesn't constrain the size of the items within. The last item in the #panel flexbox, 3.14159265359, overflows the container. In most cases, you need to set a height and width property on each flexbox item.

In the remaining examples, each item has a width and height set for better visual reference
