Book
https://book.techelevator.com/content/introduction-to-programming-ool.html#data-types

Data types
Every variable, when created, is defined with a data type. A data type classifies the variable and indicates the type of data that a particular variable holds.

In Java and C#, there are two classifications of data types: primitive (Java) / value (C#) data types and reference data types. A primitive data type stores a simple value like 42, true, or a, that consumes a fixed amount of memory. A reference type allows complex, unknown structures of data to be created by the program.

Common data types
C#	Range		Java	Range
bool	true or false		boolean	true or false
byte	0 to 255		byte	-127 to 127
char	U+0000 to U+FFFF ('a', 'b', etc.)		char	\u000 to \uffff ('a', 'b', etc.)
int	-2^31 to 2^31		int	-2^31 to 2^31
float	-3.4×10^38 to 3.4×10^38		float	-3.410^38 to 3.410^38
double	±5.0 × 10^−324 to ±1.7 × 10^308		double	±5.0 × 10^−324 to ±1.7 × 10^308
long	-2^63 to 2^63		long	-2^63 to 2^63
decimal	(-7.9×10^28 to 7.9×1028) / (10^0 to 10^28)			
Many of these data types deal with similar types of data, such as integer, boolean, and floating point. Their difference is in the ranges of values they hold. For example:

int and long both deal with integers, but long can hold significantly larger numbers
float and double both store decimal points, but double offers higher precision
Strings

string isn't considered a primitive type. It's considered a reference type.

For a reference of all C# value types, view the MSDN documentation.

For a reference of all Java primitive types, view the Java Docs

Declaring a variable
Before using a variable, you must declare it first. The declaration statement for a variable looks like:

data-type identifier;
Example:

int numberOfPeople;             //declare an integer called numberOfPeople
double gallonsOfGas;            //declare a double called gallonsOfGas
bool isRaining;                 //declare a bool(ean) called isRaining
char firstLetter;               //declare a char called firstLetter
Once a variable has been declared within a given scope, it can't be redeclared. The following code creates a compilation error:

{
    int numberOfPeople;     //legal

    //...

    int numberOfPeople;     //numberOfPeople is already in scope and can't be declared again
}

Naming variables
The Golden Rule of Programming:

Always give your variables meaningful names.

Code that has complex variable names or confusing abbreviations isn't well-received in the developer community. Keeping your variable names consistent and easy to understand benefits your colleagues and yourself. There's a chance you won't remember what you meant while fixing an error in production on a codebase you worked on over a year ago.

While variable naming is an art, when it comes to creating names, there are some best practices:

Follow camel-casing conventions: the first word is lowercase, and subsequent words have the first letter capitalized
Use pronounceable names for variables
Use names over single characters
Avoid creating multiple variables that are variations of the same name, as this creates confusion
Use names that describe WHAT the variable does, not HOW it does it
With booleans, use names that start with is, has, was, and so on; avoid using a double negative
Good Variable Names

numberOfStudents for an int
averageCostOfGas for a double
isAvailable for a boolean
Not Good Variable Names

nbr
name followed by name2, name3, etc.
numberOfStudents followed by number_of_students_
}

Giving values to variables
After you've declared a variable, you can assign it a value. Variables can be assigned three different types of values:

Literal values, like 42, true, or a, depending on the data type
Variable values where the value of one variable is given to the value of another variable
Evaluated values from an expression
The assignment operator = is used when giving a value in an assignment statement.

int numberOfPeople;             //declare an integer called numberOfPeople
double gallonsOfGas;            //declare a double called gallonsOfGas
bool isRaining;                 //declare a bool(ean) called isRaining
bool isCloudy;


numberOfPeople = 16;            //assign the integer 16 to the numberOfPeople variable
gallonsOfGas = 3.26;            //assign the double 3.26 to the gallonsOfGas variable
isRaining = true;               //assign the boolean true to the isRaining variable
firstLetter = 'a';              //assign the character 'a' to the firstLetter variable

isCloudy = isRaining;           //copy the value from isRaining into the isCloudy variable
If the variable appears on the right-hand side of the operator, then its value is retrieved and copied into another variable.

Reading Code

When reading code, it might help to read the right-hand side of the assignment statement first. Once you've determined what value will be used, use the = to indicate you are assigning a value to the variable on the left-hand side.

You may often see variables declared and assigned within the same line of code.

int numberOfPeople = 16;
double gallonsOfGas = 3.26;
bool isRaining = true;
Remember that there is a difference between declaring and assigning a value.

Constants
Consider the following program where two variables, days and seconds, are declared and used later in an arithmetic expression:

int days = 2;
int seconds = 40;

// ....

int numberOfHoursAwake = 24 * days;
int numberOfFrames = 24 * seconds;
Although 24 is the same number in both statements, they serve different meanings. In programming, 24 is considered a magic number. A magic number in programming is a unique value whose meaning is based upon its context. Above, 24 refers to the number of hours in a day and the number of frames per second.

When writing a program, you're encouraged to use constants so other programmers don't have to try to figure out what 24 means. This constant allows you to give the number a name so you can reference it throughout your code.

Using that same idea above, consider the following program that uses constants to clearly indicate the meaning of 24 in a block of code:

C#
Java
int days = 2;
int seconds = 40;
const int NumberOfHoursPerDay = 24;
