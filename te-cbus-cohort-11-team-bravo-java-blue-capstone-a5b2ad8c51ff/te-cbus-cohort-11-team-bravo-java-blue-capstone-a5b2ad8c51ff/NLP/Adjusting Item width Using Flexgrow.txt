Book
https://book.techelevator.com/content/css-flexbox.html#adjusting-item-width-using-flex-grow

Adjusting item width using flex-grow
Other than the last example above, there has been some empty space to the right of the D. To take advantage of all of the space available within the container, use the flex-grow and flex-shrink CSS properties.

The default value for each property is zero and produces the output you've seen thus far. Setting flex-grow to 1 for each article results in a remarkably different output:

<section id="bottom-horizontal">
  <article id="A">A</article>
  <article id="B">B</article>
  <article id="C">C</article>
  <article id="D">D</article>
</section>
article {
  flex-grow: 1;
}

Image - Flex Grow
Keeping the ratios in mind, you'll see that each item now takes up an equal share of the width. Use this property to take control of the flexbox items' widths.

Right now, each of the four items take up 25% of the available space. Consider a design that requires the first and last items to take up twice as much space as the second and third. You'd need to set flex-grow to 2 on the first and last items and flex-grow to 1 on the second and third to accomplish this goal:

article:nth-child(1),
article:nth-child(4) {
  flex-grow: 2;
}
article:nth-child(2),
article:nth-child(3) {
  flex-grow: 1;
}

Image - Flex Grow Double
In this example, there are twice the number of As and Ds as there are Bs and Cs. So setting flex-grow to these values allows all of the content to be seen. If they remain the same size, the As and Ds overflow their containers.

The flex-shrink property works in the opposite way. You remove space rather than add. This is important because it allows you to control the layout when the items overflow the container.

For more information, see Controlling Ratios of Flex Items
