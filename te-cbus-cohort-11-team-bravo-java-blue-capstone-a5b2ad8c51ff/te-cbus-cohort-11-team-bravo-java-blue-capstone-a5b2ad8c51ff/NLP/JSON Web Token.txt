Book
https://book.techelevator.com/content/authentication.html#json-web-token

JSON Web Token
The JSON Web Token (JWT) is a compact method of securely transmitting information between parties. When decoded, this information is a JSON object. JWTs can be used for transmitting nearly any data, but they're used primarily for authorization in APIs and other HTTP requests. JWTs are ideal because of their small size, and being an open standard, anyone can implement code to read and write JWTs.

When a user authenticates with an application that uses JWTs, the token is created and returned to the client in the response:

{
  "id": 23,
  "username": "dave",
  "role": "admin",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMyIsIm5hbWUiOiJkYXZlIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNTkwNzgwNTcwLCJleHAiOjE1OTEzODUzNzB9.k-8tPLjLqzcaNz7yuFpCsOQlic2NofJ-BSu-EkdmW7Q"
}
Note

This example is for illustrative purposes. The information you receive from another developer's API may have different names or contain other data.

Now that the client has the token, it needs to supply it for every API request that requires authorization. The JWT token goes in the Authorization HTTP header with the word Bearer. This indicates the type of authentication:

Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMyIsIm5hbWUiOiJkYXZlIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNTkwNzgwNTcwLCJleHAiOjE1OTEzODUzNzB9.k-8tPLjLqzcaNz7yuFpCsOQlic2NofJ-BSu-EkdmW7Q
When the server receives the request, it verifies the accuracy of the JWT and allows access to the resource if the user is authorized for it.

#Decoding JWTs
So far you've only seen JWTs in their encoded form. It's difficult to debug or diagnose an issue with a JWT in this format. However, as long as the token isn't encrypted, it's possible to decode the JWT to view the contents.

There are a number of tools online to decode a JWT, but one of the most popular is JWT.io. As you'll see when you open the site, they pre-populate a sample token. Start by looking at their sample token and the decoded data:


Image - JWT.io sample token
As you can see in the "decoded" side, there are three components to a JWT: header, payload (data), and signature.

The header provides information about the token itself. Typically, it only contains the algorithm (alg) used to sign, and the type (typ) of token, which is usually "JWT", but the standard allows for other type of tokens to be created in the future.
The payload is the actual data of the token, which are also called claims. Claims are statements about an entity, such as a user, and additional data, such as the time the token was issued or expires. Custom claims can be added, as you'll see in the next example.
The signature is verification that the data hasn't been tampered with. The signature is created by encoding the header and payload, combining it with a "secret"—typically only known by the server—and creating a hash based on the algorithm defined in the header. Since the secret is only known by the server, the server is the only one that can verify tokens and create new ones.
Note

Notice that some claim names are only three characters long as JWT is meant to be compact.

With the color-coded representation of the JWT, you can see that even when it's in encoded form, you can still see the three distinct parts of the token. Tokens are always in a header.payload.signature format.

#Claims
As stated before, claims are statements about an entity, typically a user. While most of the JWT standard is pretty strict, you have some flexibility on the data stored in the payload section, though you want to keep the token small so it transmits quickly in the request. That compactness is why you see claims only use three or four letters, such as sub and name.

There are a few standard claim fields defined in the JSON standard. You're not required to use any of them, but if you'll be integrating with third parties that may consume your API, or you have to pass the JWT token to another system, they're very useful.

Now copy and paste the token from above into the "Encoded" side and look at the "Payload" section of the decoded token:


Image - JWT.io provided token
You'll see the standard field sub (subject) has the value 23, which is the unique user ID of the user that's logged in. There are two non-standard fields, name and role, that store the username and role of the logged in user: dave and admin.

For authorization purposes, you'll want at least the user ID or name, and their role or permissions. Remember, the JWT is transmitted on every request, and the server only uses the token to determine whether the user is authorized for a resource or action.

There are two other fields to note: iat and exp. The values in these fields are dates in a format called Unix time. These two fields represent the time the token was "issued at" (iat) and the expiration (exp) time of the token. While neither is required, it's usually a good idea to include an expiration date to prevent token misuse. The value you choose for the expiration depends on the needs of your application.

What's Unix time?

Unix time is a date and time format that's represented as the number of seconds since 1970-01-01 00:00:00 UTC. Unix time is a compact way of storing a date and time without having to worry about format, timezone, and the ordering of month/date/year. Most modern programming languages provide methods to convert to Unix time and back.

