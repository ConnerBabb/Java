Book
https://book.techelevator.com/content/arrays-and-loops-ool.html#loops

Loops
One of the things that are best learned with arrays is the concept of loops. Programs that you write can use any of the below control structures during execution:

A straight line / top-down - the program runs from top to bottom and every line executes
Applying conditional logic - using if/else, the program conditionally executes code based on a condition being true
Repetitive code flow - the program continually executes a block of code as long as a condition remains true
This section covers that last pointâ€”repetitive code flow.

There are three different types of loops that are used in programming:

for loop - used when you want code to repeat a defined number of times (e.g. one time for each element in an array)
while loop - used when you want to continually execute a block of code as long as a condition remains true
do-while loop - used when you want to execute a block of code at least once and repeat it as long as a condition remains true
The most common loop used is the for loop, though for many of the exercises you complete and perform on the job, any of the loop choices can be substituted.

#Writing a for loop
The for loop is defined using the following syntax:

for (<initializer>; <condition>; <iterator>) {
    <body>
}
The loop consists of three very important pieces:

initializer - the statement (or set of statements) that set the initial state. This is executed one time before the loop begins.
condition - before running the body of the loop, the expression is evaluated.
iterator - a statement (or set of statements) that execute at the end of each pass through the loop.
The loop continues forever until the condition evaluates to false.

If you wanted to print "Hello World!" five times using a for loop, it would look like this:

for(int i = 1; i <= 5; i++) {
    System.out.println("Hello World!");
}

Here's how the three parts match up:

initializer - int i = 1; - declares a local loop variable called i. Its initial value is 1, and it's used to track which iteration of the loop you're on.
condition - i <= 5 - before running the body of the loop, checks to make sure i is less than 5.
iterator - i++ - after each iteration of the loop, increments the value of i by 1. This syntax is equivalent to i = i + 1. The condition is then evaluated again and if it remains true, the body executes.

Image - A for loop animation run step-by-step
Increment & Decrement Operators

There are many different ways to increment a variable:

i = i + 1;
i += 1;
i++;
There is a short-hand syntax for decrementing a variable as well:

i = i - 1;
i -= 1;
i--;
#Looping through an array
If you wanted to create a for loop that goes through your array of test scores, it might look like this:

int[] testScores = new int[10];
// ... array is populated

for(int i = 0; i < testScores.length; i++) {
    int value = testScores[i];
}
Again, looking at the three parts of the loop:

initializer - int i = 0; - i tracks which index of the array you are looking at. Since arrays start at index 0, so do you.
condition - i < testScores.length - before running the body of the loop, checks to make sure i is less than the length of the array to avoid an out of range exception.
iterator - i++ - after you look at an element at i, you want to look at the next one i + 1.
For Loops

Make sure you practice writing a lot of for loops by hand. Most whiteboard problems involve for loops, and you'll find that writing code by hand is more challenging than typing it. It's best to prepare and be confident in writing some of the fundamental C#/Java syntax.

#Calculating the average test score
Using the array of test scores, take a look at some code that can loop through the array and calculate the average. There are several steps to consider:

Add up the sum of the scores within the array
Divide the sum by the number of scores you're averaging
int[] testScores = new int[10]; // the array
int sum = 0; // the sum of all the scores

for(int i = 0; i < testScores.length; i++) {
    sum = sum + testScores[i];  // add each score to the sum
}

int average = sum / testScores.length;
In this case, you know how big the array is because you still see it. Realistically, you'll write this kind of code within methods where you didn't explicitly create the array.

private int getAverage(int[] testScores) {

    int sum = 0; // the sum of all the scores

    for(int i = 0; i < testScores.length; i++) {
        sum = sum + testScores[i];  // add each score to the sum
    }

    int average = sum / testScores.length;

    return average;
}
#Scope
Notice that the sum variable is declared outside of the for loop. If you remember from the previous topic, once declared, variables are in scope. That variable remains in scope until the end of the block when it is discarded and goes out of scope.

Given that you want your sum variable to hold its value, you need to declare it before the loop. Any variable declared within the loop is reinitialized within each iteration of the loop.

#Breaking a loop
If at any point during the loop execution you need it to end without executing the remaining iterations, the break keyword is used.

The code below looks through the array of test scores to see if it contains a perfect score:

int[] testScores = new int[10];

// ... array is populated

boolean hasPerfectScore = false;

for(int i = 0; i < testScores.length; i++) {
    if (testScores[i] == 100) {
        hasPerfectScore = true;
        break;      // stop looking for a perfect score if you've found one
    }
}

System.out.println("Contains perfect score " + hasPerfectScore);
Unfortunately, there's no way to know if the array contains a perfect score. To be sure, you need to look at every single element in the array. If you find a perfect score before the end of the array, you'd want to stop looking. There is where break comes in.

If you don't break, you'd look through the remainder of the array when you don't need to. This is like looking for your keys in every room of your house after you've already found them.

The other keyword often used with loops is continue. When used inside a loop, the code within the loop body is skipped and the iterator executes next.

#What's next
You've seen that arrays help to manage collections of data. However, one of their limitations is their inability to adjust by growing or shrinking their capacity to handle a different number of values. The Collections framework, which you'll learn about later, addresses this issue. That said, how would you solve some of the following problems?

Add a new item to the end of an already full array
Insert an item into the middle of an array
Remove an item from an array
