Book
https://book.techelevator.com/content/css-selectors-box-model.html#css-selectors

CSS Selectors
CSS is used to change the default styles of HTML elements in the browser. You can change element colors, borders, widths, heights, fonts, and display styles. To define these new rules, you first need to "select" the elements that you want to change.

#Basic Selectors
A selector selects the element or elements that you want to style on the page. There are many ways to write selectors based on how broad or specific you want to be.

#Element Selector
The Element, or Type, selector selects all HTML elements of a certain type. If you want to style all <div> elements, the CSS selector is div:

div {
    ...
}
#Class Selector
If you only want to style some elements but not others of the same type, you can apply a class attribute to the HTML elements, and write your CSS selector to apply to that class:

<div class="notice"></div>
<span class="notice"></span>
.notice {
    ...
}
Note how the selector starts with a .. This is how you denote classes in CSS.

#ID Selector
If you want to apply your style to only one element, you can apply an id attribute to the HTML element, and write your CSS selector to apply to that id:

<div id="info"></div>
#info {
    ...
}
Note how the selector starts with a #. This is how you denote ids in CSS.

IDs should be unique

In your HTML document, no two elements should have the same ID. IDs are meant to be unique in HTML. There's nothing that strictly enforces this, but certain things won't work if you reuse an ID anywhere.

#Advanced Selectors
Now that you've seen basic selectors, there are a few more "advanced" selectors that you should know. These may not be used as much as the other selector types, but you might find yourself needing one of these selectors or come across it in an existing project.

#Universal Selector
The Universal selector selects every element on a page. This could be useful in situations where you want to set some "default" values for the page, like font size and color. The universal selector is a single *:

* {
    ...
}
#Attribute Selector
The Attribute Selector selects elements that have the defined attribute, and attribute value if provided. You could think of this as a longhand version of the class and id selectors, but for any attribute that you have on an element. If the attribute value isn't provided, the selector matches as long as an attribute exists. The attribute selector uses [] to denote the attribute:

input[type] {
    ...
}
input[type=text] {
    ...
}
<input type="button" value="This only matches the first selector" />
<input type="text" value="This matches both selectors" />
There are ways to write selectors that match if the attribute value starts with, ends with, or contains a value. You can read more about attribute selectors on the MDN page for Attribute Selectors.

#Pseudo-class Selector
A pseudo-class defines a special state of an element based on user interaction or its location. A pseudo-class begins with a colon :. This example applies the CSS rule when the user hovers the mouse over any <a> element:

a:hover {
    ...
}
Other pseudo-classes include:

:focus for when the user interacts with an input element, like typing, or is ready to type in a text box.
:active to select the element the user is actively clicking on; typically used for a elements, but can be applied to any type.
:first-child and :last-child selects every element that is the first/last child of its parent.
:enabled and :disabled matches every enabled/disabled element; mostly used on input elements in a form.
There are many more pseudo-classes. These are some of the more common ones. You can read more about them at the MDN page for Pseudo-classes.

#Combinators
Another powerful feature of CSS selectors is that they can be combined to specify the elements you want from the page. There are several combinators that you can use to narrow down your selection.

#Combo Combinator
button[type=submit].danger {
    ...
}
You can combine selectors into very specific selections by combining them. The above uses an element selector, an attribute selector, and a class selector to apply the rule to any button element that has an attribute of type equal to submit that also has a class of danger. There can be no spaces between any of these parts if you want them all to apply to the same element.

#Multiple Combinator
button, input[type=checkbox], select {
    ...
}
You can have a set of styles apply to different elements by separating those elements with a comma. The above style applies to all buttons and all checkboxes and all select elements.

See the diagram below for another example and how the elements are selected in the document tree:


Image - Multiple Combinator Example
#Descendant Combinator
div.aside p {
    ...
}
Descendant combinators select all the elements that are inside another element. The rule above applies to any p element that is anywhere within a div element that has a class of aside. For example, the styles apply to the following p elements:

<div class="aside">
    <p>Styles will apply to this paragraph</p>
    <div class="section">
        <p>Styles will apply to this paragraph also because it is still inside the div.aside</p>
    </div>
</div>
See the diagram below for another example and how the elements are selected in the document tree:


Image - Descendant Combinator Example
#Child Combinator
div.aside > p {
    ...
}
Child combinators select all the elements that are direct children of another element. The rule above applies to any p element that is directly under a div element that has a class of aside. For example, the styles apply to only the first p element:

<div class="aside">
    <p>Styles will apply to this paragraph</p>
    <div class="section">
        <p>Styles will *NOT* apply to this paragraph because it is not a direct child of div.aside</p>
    </div>
</div>
See the diagram below for another example and how the elements are selected in the document tree:


Image - Child Combinator Example
