Book
https://book.techelevator.com/content/css-flexbox.html#sizing-flexbox-items-based-upon-ratios

Sizing flexbox items based upon ratios
The browser carries out complex calculations for you when you use Flexbox. The calculations consider the available space within the container and the amount of space required by each item within that container. The flex-basis property specifies the initial size of the flexbox item before the browser carries out these calculations The flex-grow and flex-shrink properties determine how much of the ratio each item can occupy.

You apply these CSS properties to the flexbox items, not the container. You can set these properties on the item elements either collectively or individually for each item. In the examples so far, flex-basis is automatically set to its default, auto, which uses the width and height of the flexbox item as the basis.

There are two other settings to know: content and a specific CSS length, like %, px, and em. The content setting determines the size of the content within the item and uses that size as the basis.

The remaining sample CSS and images are based upon this HTML:

<section id="bottom-horizontal">
  <article id="A">A</article>
  <article id="B">B</article>
  <article id="C">C</article>
  <article id="D">D</article>
</section>
In the code block below, no flex-basis setting is specified in the CSS:

#bottom-horizontal {
  display: flex;
  /* No flex-basis specified */
}
The image below shows the result. Note the remaining space to the right of the D element:


Image - Flex Basis 50
In this code block, flex-basis is set to 50% on the first item:

#A {
  flex-basis: 50%;
}
This allows that item to take up half of the available space:


Image - Flex Basis 50
Notice that there's still space remaining to the right of the D element above. This is because the combined width of all the items isn't enough to fill the space.

Finally, in this code block, flex-basis is set to 50% for the first three items:

#A, #B, #C {
  flex-basis: 50%;
}
Notice how the flexbox container doesn't expand to fit the three items:


Image - Flex Basis 3x50
The calculations aren't difficult, but they're beyond the scope of this chapter. For more information, see How Flex Grow Calculations Work.

#Adjusting item width using flex-grow
Other than the last example above, there has been some empty space to the right of the D. To take advantage of all of the space available within the container, use the flex-grow and flex-shrink CSS properties.

The default value for each property is zero and produces the output you've seen thus far. Setting flex-grow to 1 for each article results in a remarkably different output:

<section id="bottom-horizontal">
  <article id="A">A</article>
  <article id="B">B</article>
  <article id="C">C</article>
  <article id="D">D</article>
</section>
article {
  flex-grow: 1;
}

Image - Flex Grow
Keeping the ratios in mind, you'll see that each item now takes up an equal share of the width. Use this property to take control of the flexbox items' widths.

Right now, each of the four items take up 25% of the available space. Consider a design that requires the first and last items to take up twice as much space as the second and third. You'd need to set flex-grow to 2 on the first and last items and flex-grow to 1 on the second and third to accomplish this goal:

article:nth-child(1),
article:nth-child(4) {
  flex-grow: 2;
}
article:nth-child(2),
article:nth-child(3) {
  flex-grow: 1;
}

Image - Flex Grow Double
In this example, there are twice the number of As and Ds as there are Bs and Cs. So setting flex-grow to these values allows all of the content to be seen. If they remain the same size, the As and Ds overflow their containers.

The flex-shrink property works in the opposite way. You remove space rather than add. This is important because it allows you to control the layout when the items overflow the container.

For more information, see Controlling Ratios of Flex Items
