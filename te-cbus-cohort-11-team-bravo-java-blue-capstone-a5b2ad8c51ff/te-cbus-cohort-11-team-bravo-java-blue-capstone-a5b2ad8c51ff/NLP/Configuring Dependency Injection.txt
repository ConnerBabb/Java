Book
https://book.techelevator.com/content/dependency-injection.html#configuring-dependency-injection

Dependency Injection
As applications become more complex, the number of classes and dependencies between classes increases. One of the objectives of Object-Oriented Programming is to make it easier to deal with complexity by making code modular.

Functionality is decomposed into different classes that each have a specific purpose and responsibility in the system. This way, instead of needing to understand an entire system all at once, you can think about one class at a time.

For example, controller classes commonly use DAOs to store and retrieve data. Up until now, you've created instances of DAOs in a controller like this:

private HotelDao dao;

public HotelController() {
    dao = new MemoryHotelDao();
}
When a class uses, or depends on, another class, it's best to focus on what the other class is doing—that is, what service it's providing—rather than how it's doing it. While a DAO can be created in a controller this way, it ties the controller to a specific implementation, like an in-memory DAO implementation rather than a relational database. This should be avoided.

Then how can this class depend on another class without creating it itself?

The technique for doing this is called Dependency Injection. Dependency Injection is where instances of classes that are depended on are injected into a new object rather than created by that object. This further decouples the classes from each other and allows the controller to be completely independent from any implementation of the DAO interface

Configuring dependency injection
In Spring, if you want to inject one class into another, you add an annotation. For the DAOs, you'd add an @Component annotation:

@Component
public class MemoryHotelDao implements HotelDao {
    ...
}
Now, the MemoryHotelDao class can be injected into other classes, like the controller. To inject the DAO into the controller, you declare a constructor parameter of the class you depend on in the controller like this:

private HotelDao dao;

public HotelController(HotelDao dao) {
    this.dao = dao
}
Now, when Spring creates the controller, an instance of the DAO class with the @Component annotation is also created and injected into the controller for you.

This also makes the controller easier to unit test. When creating a new controller in a unit test, you can pass in a test version of the HotelDao:

HotelController testController = new HotelController(new TestHotelDao());
This allows the HotelController to depend on any HotelDao without being tied to a single implementation of it.
