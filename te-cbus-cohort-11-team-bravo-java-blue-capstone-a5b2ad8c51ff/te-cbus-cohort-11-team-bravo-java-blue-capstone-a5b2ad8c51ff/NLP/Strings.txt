Book
https://book.techelevator.com/content/introduction-to-objects-ool.html#strings

Strings
The first object to discuss is objects from the String class. To create a new String object, use the " syntax.

String myName = "joe";
Earlier, you learned that new objects are created with the new keyword, but strings are special because they're frequently used. So, Java and C# allow you to create new String objects with the " literal.

The above code creates a new string object with the contents of "joe" on the Heap and assigns its address to the newly declared myName variable.

The myName variable now acts like a handle on the actual object. You can get to the object's methods by using the dot (.) operator.

int lengthOfTheString = myName.length();
There are other useful methods to look at for Strings.

#Length
length() returns the number of characters in the String:

String name = "joe";
int lengthOfName = name.length(); // Will return 3
#Substring
The substring() method gets a small subset of an existing String. The parameters are:

The index to start the substring.
An optional index to end the substring. If not given, it goes to the end of the String.
String fullName = "Java Jones";
String firstName = fullName.substring(0, 4); // <- Will equal "Java"
String lastName = fullName.substring(5); // <- Will equal "Jones"
#Contains
The contains() method checks if a String contains another String. The parameter is the String to search for:

String fullName = "Java Jones";
boolean hasJavaInIt = fullName.contains("Java"); // Will equal true
#Starting and ending
The startsWith() and endsWith() methods work like the contains() method, but they only check if the String starts or ends with the given parameter:

String fullName = "Java Jones";
boolean startsWithJava = fullName.startsWith("Java"); // Will equal true
#Index of
The indexOf() method looks through a String, finds the first occurrence of another String, and returns back at what index the String was found:

            // 0123456789
String name = "Java Jones";
int firstJFound = name.indexOf("J"); // Will return 0
int firstLetterOfJones = name.indexOf("Jones"); // Will return 5
#Replace
The replace() method returns a new String where all occurences of a given string are replaced with another String:

String name = "Java Jones";
String nameWithReplacements = name.replace("Java", "Justin");
    // nameWithReplacements will equal "Justin Jones"
    // name will still equal "Java Jones"
Immutability

Strings are immutable objects. Immutable means that it is impossible to change its value once it's created. Using the replace() method always generates a new string.

#Comparing two strings (Java)
equals() and equalsIgnoreCase() are two methods that compare the current String object to a String object parameter and return true or false. equals() only returns true if the characters are exactly the same; equalsIgnoreCase() ignores whether a letter is upper or lower case:

String name = "Joe";
String otherName = "joe";
boolean exactlyTheSame = name.equals(otherName); // Will be false
boolean closeToTheSame = name.equalsIgnoreCase(otherName); // Will be true
#Splitting and joining strings
split() and String.join() are two methods that turn a String into an array of Strings by splitting on a character in the String and turn an array of Strings back into a single String.

Both of these methods work off of a delimiter, which is a character or set of characters that mark different sections of a String:

String fullString = "Joe;Mark;Josh;Craig";
String[] separateNames = fullString.split(";");
    // separateNames will contain ["Joe", "Mark", "Josh", "Craig"]
String togetherNames = String.join(",", separateNames);
    // togetherNames will equal "Joe,Mark,Josh,Craig"
