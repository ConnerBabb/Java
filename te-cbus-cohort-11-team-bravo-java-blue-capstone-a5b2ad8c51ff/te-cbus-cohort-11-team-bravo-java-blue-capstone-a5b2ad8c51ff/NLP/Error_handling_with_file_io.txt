Book
https://book.techelevator.com/content/file-io-ool.html#error-handling-with-file-i-o

Error handling with File I/O
When working with external resources, you know that errors are bound to happen at some point. When reading a file, there's a chance that the file isn't there, or it could be deleted halfway through reading it. Because of that, you need to be able to handle a FileNotFoundException.

There's another issue with the code above. Files are a lot like windows; if you open one, you need to remember to close it. Otherwise, the couch will get soggy, and nobody wants that.

The Scanner above opens the file for reading, but nothing closes the file. The file might close when the program ends, but opening a file can put a lock on it, preventing other applications from working with the file. You want to make sure you only have the file open for as long as you need it and no longer than that.

You can handle both of these issues with a new kind of try block: the try-with-resources block.

try (Scanner dataInput = new Scanner(dataFile)) {
    ...
} catch (FileNotFoundException ex) {
    System.err.println("The file does not exist.");
}
Because you're passing the Scanner creation to the try block, this both closes the file once the try block is done and catches a FileNotFoundException if something happens with the file while reading it. You should always use this style of code whenever you open a file for reading or writing.
