Book
https://book.techelevator.com/content/data-security.html#data-hashing

Data Hashing
Keeping unauthorized users out of your database is a solid first step in keeping your data secure. But does that mean no one will ever steal the data? What if someone who works at the company is offered large sums of money to steal the data? (It has happened.)

To protect data after it's been stolen seems like an impossible task, but there are two ways that this is done in applications: hashing and encryption. Hashing is used to hide original data by scrambling it into something new, and encryption is used to scramble data in a way that can be reversible.

#Hashing
One way to hide data is by scrambling it so that it can't be recovered by anyone. This may sound like a bad idea, but it's useful in a lot of different scenarios.

The way that you do that is by using a Cryptographic Hash Function. This is typically called hashing the value. Hashing is the process of taking a value, putting it through a repeatable mathematical function, and getting a different value out the other end.

It's important to note that if you only have the value that came out at the end, it's impossible to reverse the function and know what the original value was. These kind of algorithms are very useful for verifying whether the contents of a file have changed or not.


Image - Example hash use
Even just one small change to a file, like a letter change in the word 'over', completely changes the resulting hash value. It's also very fast. Even a large value can be passed into the function and have it compute a hash in a short amount of time.

Common uses of hashing includes:

Dropbox, who uses it to sync files. It keeps a database of file names and their hashes and then, when a file is updated, recomputes the hash to see if its contents have changed. That way, Dropbox only needs to upload files to their server if they've actually changed.
HashMaps and Dictionaries in Java and C#. When you put a value in, a hash of its key is calculated to see where in the backing data structure the value should go. This makes it very easy to find and store values instead of having to search through an entire data structure to see if it's there.
Git uses hashes to track file changes and commits. A hash of a commit's contents and the current time is used to make sure all commits have a unique identifier.
The main way that web developers use hashing is by hashing passwords.

#Password hashing
Nearly all web applications have a concept of usernames and passwords. If you know a user's username and password, you can access all of their data on a website and act like them on the website. If someone was able to obtain someone's password on Dropbox, they would essentially have full access to that person's files.

So if someone was able to get the database of usernames and passwords of all Dropbox users, that would be a pretty bad breach, right?

Not necessarily. In most web applications - and it should be all web applications - passwords aren't stored directly in the database. They are hashed first and then stored in the database. This means that even if someone got the database with all the usernames and passwords, they still wouldn't be able to log in as those users.

So how do normal users log in? When they come to the site, they enter their original password and the application hashes it and checks that hash against what's in the database. If the two hashes match, the user is logged in.

Because the hashes are impossible to reverse, an attacker that has a database full of hashes would never be able to get the original passwords anyway.

Unless...

#Hashing vulnerabilities
It is possible, with a weak hashing algorithm and a weak password, that an attacker could just generate every possible combination of password and check those against a database of hashes. If a hash matches, the attacker knows that they can log in as that user.

This is especially true for short passwords. Using any character on a standard QWERTY keyboard, there are five hundred trillion possible 8 character passwords. Now most users don't pick random passwords either - they pick words, typically English words. The average person's vocabulary is 20,000 words. A user might make their password hard to guess by adding in a number or a special character, typically at the end.

Sound like any of your passwords yet?

So how easy is it to crack a password like that? Pretty easy. Modern CPUs and GPUs can calculate billions of hashes a second. Running through all the possibilities of 8 character word-like passwords is pretty simple.

In fact, it's already been done for a lot of common passwords already. There are sites out there, like HashToolkit that have full databases of already calculated hash values. If you just use a simple hash algorithm, attackers could upload your database to one of these sites and have plain passwords in no time. This is called a dictionary attack. A dictionary attack pre-computes the hash values of likely passwords and indexes the value. Given a hashed password, the hash is looked up to see if an entry exists in the dictionary. These dictionaries are also sometimes called rainbow tables.

If attackers already have access to vast amounts of pre-calculated hashes, how can you protect your users? These dictionaries are only useful for short passwords. The longer a password gets, the more possibilities it could have and the longer it will take to calculate all possibilities. So, you need to make each user's password longer before hashing it. You can do that with some salt.

#Salting passwords
A salt is a fixed-length, cryptographically-strong random value. It's added to the end of the password to make the password longer and make it take more time to do a full dictionary attack. If every user gets a different salt, then attackers would have to calculate a full dictionary per user, making the time it takes to crack any password well outside the realm of reasonable time. A salt makes it practically impossible to pre-compute all possible hashes of a password, given that one character can change the entire output hash, let alone 6, 8, or 20. You can read more about salting passwords.

But processors can still tear through a large number of hashes in a second. At 500 billion passwords a second, an attacker could churn through all 500 trillion 8 character passwords in about 17 minutes. Another technique for solving this problem is to make the hashing process take longer.

#Adaptive Hashing functions and work factors
Many hashing functions are built to be fast. When Dropbox is calculating hashes of your files, you want that to happen as quickly as possible.

But for passwords, your application just needs to calculate the hash when the password is created and when the user logs in. If those hashes take a half a second to a second to calculate, will it really hurt anything? If a hash takes a second per calculation for an attacker, they can forget trying to calculate enough of them to get any useful passwords out of the stolen data.

The nice thing about an adaptive hashing function is that you can change how long it takes to run. As computers get faster and hardware gets better, hashing functions can be calculated faster and faster. That means that, over time, you'll want to make your hashing functions slower and slower. You do that with a work factor. A work factor is a setting on an adaptive hashing function that tells the function how many cycles of the hashing function to run. The more times it runs, the longer it takes. Also, if you ever need to make it run more times, you just increase the work factor, and your site is magically more secure.

Some example, and popular, adaptive functions are:

Argon2 is the winner of the password hashing competition and should be considered as your first choice for new applications.
PBKDF2 when FIPS certification or enterprise support on many platforms is required.
scrypt where resisting any/all hardware accelerated attacks is necessary but support isn't.
bcrypt where PBKDF2 or scrypt support is not available.
Many languages support one of these algorithms already, so use the one that is included in whatever you're building.

TIP

Passwords should never be stored in a database. All passwords should be hashed with a salt and the resulting value stored
