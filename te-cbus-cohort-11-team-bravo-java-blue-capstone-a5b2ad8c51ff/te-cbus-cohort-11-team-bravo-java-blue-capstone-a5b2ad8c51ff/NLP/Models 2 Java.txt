Book
https://book.techelevator.com/content/server-side-api-1-java.html#models-2

Models
In the example for the getTodos() method, the code returns an List<String>. This works well, but what happens when you want to represent data that's more than a simple string? For example, a Todo object could have the following properties:

id: int
task: String
completed: Boolean
dueDate: LocalDateTime
#What is a model?
In Java, a model is a class that represents the data of your application. Models often contain properties. They may also contain validation logic that enforces rules about the type of data the model can hold.

Here's an example model:

package com.techelevator.models;

public class Todo {

    private int id;
    private String task;
    private LocalDateTime dueDate;
    private Boolean completed;

    public Todo() {

    }

    public Todo(int id, String task) {
        this.id = id;
        this.task = task;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    // ... The rest of the getters and setters ... //
}
Note the package name, package com.techelevator.models in the code above. Much like controllers, models are typically collected in their own package.

#Using a model
Models are instantiated and populated from within a controller. In most cases, when the application uses a database, the controller uses a data access object (DAO) to populate the model. Going back to the TodoController, you could replace the List<String> with List<Todo>:

@RestController
public class TodoController {

    private List<Todo> todos;

    public TodoController() {
        Todo wakeup = new Todo(1,"Wake up");
        Todo shower = new Todo(2, "Shower");
        Todo drive  = new Todo(3,"Drive to work");
        todos = new ArrayList<>(Arrays.asList(wakeup, shower, drive));
    }

    @RequestMapping(path = "/todo", method = RequestMethod.GET)
    public List<Todo> getTodos() {
        return todos;
    }

    @RequestMapping(path = "/todo", method = RequestMethod.POST)
    public void addTodo(Todo todo) {
        if (todo != null) {
            todos.add(todo);
        }
    }
}
A GET request to /todo now returns a list of todos instead of the list of strings you saw before:

[
  {
    "id": 1,
    "task": "Wake up",
    "dueDate": null,
    "completed": null
  },
  {
    "id": 2,
    "task": "Shower",
    "dueDate": null,
    "completed": null
  },
  {
    "id": 3,
    "task": "Drive to work",
    "dueDate": null,
    "completed": null
  }
];
The benefit here is that you can use the same model when you're dealing with a list of Todos or when you want to get a specific todo:

@RequestMapping("/todo/first", method = RequestMethod.GET)
public Todo getTodo() {
    return todos.get(0);
}
A GET request to /todo/first returns the first todo in the list.

{
    "id": 1,
    "task": "Wake up",
    "dueDate": null,
    "completed": null
  }
